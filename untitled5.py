# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18XgBgF6L78xGrV6d1NSsMiP0_oihUhli
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from google.colab import files
import matplotlib.pyplot as plt
import seaborn as sns

print("Please upload your sensor data CSV file")
uploaded = files.upload()

# Get uploaded filename
for fn in uploaded.keys():
    filename = fn

# Load CSV
try:
    df = pd.read_csv(filename)
    print(f"\n‚úÖ File '{filename}' uploaded and loaded successfully!")
    print(f"üìê Shape of dataset: {df.shape}")
except Exception as e:
    print(f"‚ùå Error loading file: {e}")
    raise SystemExit

# Find activity/label column
activity_column = None
for col in df.columns:
    if 'activity' in col.lower() or 'label' in col.lower():
        activity_column = col
        break

if activity_column is None:
    print("‚ùå Error: 'Activity' or similar column not found.")
    raise SystemExit

# Fill missing data
for col in df.columns:
    if pd.api.types.is_numeric_dtype(df[col]):
        df[col].fillna(df[col].median(), inplace=True)
    else:
        df[col].fillna(df[col].mode()[0], inplace=True)

# Prepare features and labels
X = df.drop(activity_column, axis=1)
y = df[activity_column]

# Encode labels
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Ensure test set is large enough
num_classes = len(np.unique(y_encoded))
min_test_size = num_classes / len(df)
test_size = max(0.2, min_test_size)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y_encoded, test_size=test_size, random_state=42, stratify=y_encoded
)

# Train classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluation
accuracy = accuracy_score(y_test, y_pred)
print(f"\nüéØ Accuracy: {accuracy * 100:.2f}%")
print("\nüìã Classification Report:")
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.title("üìä Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# Feature importance
feature_importances = model.feature_importances_
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.title("üîç Feature Importance")
plt.show()